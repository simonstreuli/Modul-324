name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, 'release/**', 'hotfix/**']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  pages: write
  id-token: write

jobs:
  lint-and-test:
    name: Lint and Test Backend
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./ticketsystem/backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ./ticketsystem/backend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run tests with coverage
        env:
          NODE_ENV: test
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ./ticketsystem/backend/coverage/lcov-report/
          retention-days: 30

  build-swagger:
    name: Build Swagger Documentation
    runs-on: ubuntu-latest
    needs: lint-and-test

    defaults:
      run:
        working-directory: ./ticketsystem/backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ./ticketsystem/backend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build Swagger Docs
        env:
          PORT: 6001
          NODE_ENV: production
          MONGO_URI: mongodb://localhost:27017/ticketsystem
          HOST_URL: ${{ vars.HOST_URL }}
        run: npm run build:swagger

      - name: Upload Swagger Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: swagger-docs
          path: ./ticketsystem/backend/swagger.json
          retention-days: 30

  build-and-push-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [lint-and-test, build-swagger]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/heads/hotfix/'))

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Swagger Artifacts
        uses: actions/download-artifact@v4
        with:
          name: swagger-docs
          path: ./ticketsystem/backend

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from package.json
        id: package-version
        run: |
          echo "version=$(node -p \"require('./ticketsystem/backend/package.json').version\")" >> $GITHUB_OUTPUT

      - name: Determine Docker tags
        id: docker-tags
        run: |
          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "tags=ghcr.io/${REPO_LOWER}:latest,ghcr.io/${REPO_LOWER}:v${{ steps.package-version.outputs.version }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "tags=ghcr.io/${REPO_LOWER}:develop" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/heads/release/* ]]; then
            RELEASE_VERSION=$(echo "${{ github.ref }}" | sed 's/refs\/heads\/release\///')
            echo "tags=ghcr.io/${REPO_LOWER}:${RELEASE_VERSION},ghcr.io/${REPO_LOWER}:pre-prod" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/heads/hotfix/* ]]; then
            echo "tags=ghcr.io/${REPO_LOWER}:hotfix-${{ steps.package-version.outputs.version }}" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./ticketsystem/backend
          push: true
          tags: ${{ steps.docker-tags.outputs.tags }}
          build-args: |
            HOST_URL=${{ vars.HOST_URL }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    name: Create Release Tag
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from package.json
        id: package-version
        run: |
          echo "version=$(node -p \"require('./ticketsystem/backend/package.json').version\")" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        id: check-tag
        run: |
          if git rev-parse "v${{ steps.package-version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Git tag
        if: steps.check-tag.outputs.exists == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v${{ steps.package-version.outputs.version }}" -m "Release version ${{ steps.package-version.outputs.version }}"
          git push origin "v${{ steps.package-version.outputs.version }}"

  deploy-coverage-to-pages:
    name: Deploy Coverage to GitHub Pages
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'

    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: ./coverage-report

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./coverage-report

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4